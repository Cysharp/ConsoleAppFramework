//// <auto-generated/>
//#nullable enable
//#pragma warning disable CS0108 // hides inherited member
//#pragma warning disable CS0162 // Unreachable code
//#pragma warning disable CS0164 // This label has not been referenced
//#pragma warning disable CS0219 // Variable assigned but never used
//#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
//#pragma warning disable CS8601 // Possible null reference assignment
//#pragma warning disable CS8602
//#pragma warning disable CS8604 // Possible null reference argument for parameter
//#pragma warning disable CS8619
//#pragma warning disable CS8620
//#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
//#pragma warning disable CS8765 // Nullability of type of parameter
//#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
//#pragma warning disable CA1050 // Declare types in namespaces.
//#pragma warning disable CS1998
//#pragma warning disable CS8625

//namespace ConsoleAppFramework;

//using System;
//using System.Text;
//using System.Reflection;
//using System.Threading;
//using System.Threading.Tasks;
//using System.Runtime.InteropServices;
//using System.Runtime.CompilerServices;
//using System.Diagnostics.CodeAnalysis;
//using System.ComponentModel.DataAnnotations;

//using Microsoft.Extensions.DependencyInjection;
//using Microsoft.Extensions.Logging;
//using Microsoft.Extensions.Configuration;
//using Microsoft.Extensions.Hosting;

//internal static class ConsoleAppHostBuilderExtensions
//{
//    class CompositeDisposableServiceProvider(IDisposable host, IServiceProvider serviceServiceProvider, IDisposable scope, IServiceProvider serviceProvider)
//        : IServiceProvider, IDisposable
//    {
//        public object? GetService(Type serviceType)
//        {
//            return serviceProvider.GetService(serviceType);
//        }

//        public void Dispose()
//        {
//            if (serviceProvider is IDisposable d)
//            {
//                d.Dispose();
//            }
//            scope.Dispose();
//            if (serviceServiceProvider is IDisposable d2)
//            {
//                d2.Dispose();
//            }
//            host.Dispose();
//        }
//    }

//    internal static ConsoleApp.ConsoleAppBuilder ToConsoleAppBuilder(this IHostBuilder hostBuilder)
//    {
//        var host = hostBuilder.Build();
//        var serviceServiceProvider = host.Services;
//        var scope = serviceServiceProvider.CreateScope();
//        var serviceProvider = scope.ServiceProvider;
//        ConsoleApp.ServiceProvider = new CompositeDisposableServiceProvider(host, serviceServiceProvider, scope, serviceProvider);

//        return ConsoleApp.Create();
//    }

//    internal static ConsoleApp.ConsoleAppBuilder ToConsoleAppBuilder(this HostApplicationBuilder hostBuilder)
//    {
//        var host = hostBuilder.Build();
//        var serviceServiceProvider = host.Services;
//        var scope = serviceServiceProvider.CreateScope();
//        var serviceProvider = scope.ServiceProvider;
//        ConsoleApp.ServiceProvider = new CompositeDisposableServiceProvider(host, serviceServiceProvider, scope, serviceProvider);

//        return ConsoleApp.Create();
//    }
//}
